name: PR Automation

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, unlabeled]
  issue_comment:
    types: [created]
  workflow_dispatch:

jobs:
  # Auto-label PRs based on changed files
  auto-label:
    name: Auto-label Pull Request
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: read
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Label based on changed files
      uses: actions/github-script@v8
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const labels = [];
          const filenames = files.map(file => file.filename);
          
          // Check for different types of changes
          if (filenames.some(name => name.includes('.md'))) {
            labels.push('documentation');
          }
          
          if (filenames.some(name => name.includes('package.json') || name.includes('package-lock.json'))) {
            labels.push('dependencies');
          }
          
          if (filenames.some(name => name.includes('.github/workflows/'))) {
            labels.push('ci/cd');
          }
          
          if (filenames.some(name => name.includes('.ts') || name.includes('.tsx'))) {
            labels.push('web-interface');
          }
          
          if (filenames.some(name => name.includes('.cpp') || name.includes('.h') || name.includes('CMakeLists.txt'))) {
            labels.push('cpp-application');
          }
          
          if (filenames.some(name => name.includes('src/') || name.includes('include/'))) {
            labels.push('core');
          }
          
          if (filenames.some(name => name.includes('wiki/'))) {
            labels.push('wiki');
          }
          
          // Apply labels
          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: labels
            });
          }

  # Check PR requirements
  pr-checks:
    name: Pull Request Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Check PR title format
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"
        
        # Check if title follows conventional commit format (loosely)
        if echo "$PR_TITLE" | grep -qE "^(feat|fix|docs|style|refactor|test|perf|build|ci|chore)(\(.+\))?: .+"; then
          echo "‚úÖ PR title follows conventional commit format"
        else
          echo "‚ö†Ô∏è PR title doesn't follow conventional commit format"
          echo "Consider using: type(scope): description"
          echo "Examples: feat(web): add new dashboard, fix(cpp): resolve memory leak"
        fi
        
    - name: Check PR description
      run: |
        PR_BODY="${{ github.event.pull_request.body }}"
        
        if [ -z "$PR_BODY" ]; then
          echo "‚ö†Ô∏è PR description is empty. Consider adding:"
          echo "- What changes were made"
          echo "- Why the changes were necessary" 
          echo "- How to test the changes"
        else
          echo "‚úÖ PR description provided"
        fi
        
    - name: Check for breaking changes
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        PR_BODY="${{ github.event.pull_request.body }}"
        
        if echo "$PR_TITLE $PR_BODY" | grep -qi "breaking\|BREAKING"; then
          echo "‚ö†Ô∏è This PR may contain breaking changes"
          echo "Please ensure:"
          echo "- Version number is updated appropriately"
          echo "- CHANGELOG.md is updated"
          echo "- Documentation reflects the changes"
        else
          echo "‚úÖ No breaking changes detected"
        fi

  # Size check
  pr-size-check:
    name: PR Size Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Check PR size
      uses: actions/github-script@v8
      with:
        script: |
          const { data: files } = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const totalChanges = files.reduce((sum, file) => sum + file.changes, 0);
          const filesChanged = files.length;
          
          console.log(`Files changed: ${filesChanged}`);
          console.log(`Total changes: ${totalChanges}`);
          
          let size = 'small';
          let message = '‚úÖ Small PR - easy to review';
          
          if (totalChanges > 1000 || filesChanged > 30) {
            size = 'large';
            message = '‚ö†Ô∏è Large PR - consider breaking into smaller pieces';
          } else if (totalChanges > 500 || filesChanged > 15) {
            size = 'medium';
            message = 'üìä Medium PR - manageable size';
          }
          
          // Add size label
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: [`size/${size}`]
          });
          
          // Add comment if large
          if (size === 'large') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `üîç **Large PR Detected**\n\nThis PR modifies ${filesChanged} files with ${totalChanges} total changes.\n\nConsider:\n- Breaking it into smaller, focused PRs\n- Ensuring adequate testing\n- Providing detailed description of changes`
            });
          }

  # Respond to commands in comments
  comment-commands:
    name: Handle Comment Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && contains(github.event.comment.body, '/') && github.event.issue.pull_request
    permissions:
      pull-requests: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Handle commands
      uses: actions/github-script@v8
      with:
        script: |
          const comment = context.payload.comment.body.trim();
          
          if (comment === '/ready') {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['ready-for-review']
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚úÖ Marked as ready for review!'
            });
          }
          
          if (comment === '/help') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `ü§ñ **Available Commands**\n\n- \`/ready\` - Mark PR as ready for review\n- \`/help\` - Show this help message\n\n**Auto-applied Labels:**\n- File-based labels (documentation, web-interface, cpp-application, etc.)\n- Size labels (size/small, size/medium, size/large)\n- Type labels based on changes`
            });
          }