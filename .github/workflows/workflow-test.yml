name: Workflow Test

# This workflow tests that all other workflows can run successfully
on:
  push:
    paths:
      - '.github/workflows/**'
  pull_request:
    paths:
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  # Validate workflow syntax
  validate-workflows:
    name: Validate Workflow Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Validate YAML syntax
      run: |
        echo "Validating workflow YAML files..."
        for file in .github/workflows/*.yml; do
          echo "Checking $file..."
          python3 -c "
        import yaml
        import sys
        try:
            with open('$file', 'r') as f:
                yaml.safe_load(f)
            print('‚úÖ $file is valid YAML')
        except yaml.YAMLError as e:
            print('‚ùå $file has YAML syntax error:', e)
            sys.exit(1)
        except Exception as e:
            print('‚ùå Error reading $file:', e)
            sys.exit(1)
        "
        done
        
    - name: Check workflow names are unique
      run: |
        echo "Checking for unique workflow names..."
        WORKFLOW_NAMES=$(grep "^name:" .github/workflows/*.yml | cut -d: -f2 | sort)
        UNIQUE_NAMES=$(echo "$WORKFLOW_NAMES" | sort -u)
        
        if [ "$(echo "$WORKFLOW_NAMES" | wc -l)" != "$(echo "$UNIQUE_NAMES" | wc -l)" ]; then
          echo "‚ùå Duplicate workflow names found"
          echo "All names:"
          echo "$WORKFLOW_NAMES"
          exit 1
        else
          echo "‚úÖ All workflow names are unique"
        fi

  # Test basic workflow functionality
  test-basic-functionality:
    name: Test Basic Functionality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Test npm install
      run: |
        echo "Testing npm install..."
        npm ci
        echo "‚úÖ npm install successful"
        
    - name: Test build process
      run: |
        echo "Testing build process..."
        npm run build
        echo "‚úÖ Build successful"
        
    - name: Test file structure
      run: |
        echo "Testing expected file structure..."
        test -f package.json && echo "‚úÖ package.json exists"
        test -f tsconfig.json && echo "‚úÖ tsconfig.json exists"
        test -f vite.config.ts && echo "‚úÖ vite.config.ts exists"
        test -f CMakeLists.txt && echo "‚úÖ CMakeLists.txt exists"
        test -d src && echo "‚úÖ src directory exists"
        test -d include && echo "‚úÖ include directory exists"
        test -d dist && echo "‚úÖ dist directory created by build"

  # Test workflow dependencies
  test-workflow-dependencies:
    name: Test Workflow Dependencies
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Check action versions
      run: |
        echo "Checking GitHub Action versions..."
        
        # Extract action versions from workflows
        grep -r "uses:" .github/workflows/ | grep -v "^#" | sort | uniq
        
        echo "‚úÖ Action versions extracted"
        
    - name: Verify required secrets (simulation)
      run: |
        echo "Verifying workflow secret requirements..."
        
        # Check if workflows use secrets properly
        if grep -r "secrets\." .github/workflows/; then
          echo "‚ö†Ô∏è Workflows use secrets - ensure they are configured in repository"
        else
          echo "‚úÖ No hardcoded secret dependencies"
        fi
        
    - name: Check for required permissions
      run: |
        echo "Checking workflow permissions..."
        
        # Look for permission requirements
        if grep -r "permissions:" .github/workflows/; then
          echo "‚ÑπÔ∏è Some workflows require specific permissions"
          grep -r "permissions:" .github/workflows/ | head -10
        else
          echo "‚úÖ No special permission requirements found"
        fi

  # Simulate workflow execution paths
  simulate-execution:
    name: Simulate Workflow Execution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Simulate CI workflow (web part)
      run: |
        echo "Simulating CI workflow - web interface build..."
        npm ci
        npx tsc --noEmit
        npm run build
        echo "‚úÖ Web interface simulation successful"
        
    - name: Simulate documentation workflow
      run: |
        echo "Simulating documentation workflow..."
        
        # Basic documentation checks
        test -f README.md && echo "‚úÖ README.md exists"
        test -f CONTRIBUTING.md && echo "‚úÖ CONTRIBUTING.md exists"
        test -f CHANGELOG.md && echo "‚úÖ CHANGELOG.md exists"
        
        # Count documentation
        MD_COUNT=$(find . -name "*.md" | wc -l)
        echo "üìù Found $MD_COUNT markdown files"
        
        echo "‚úÖ Documentation simulation successful"
        
    - name: Simulate code quality checks
      run: |
        echo "Simulating code quality workflow..."
        
        # TypeScript check
        npx tsc --noEmit
        echo "‚úÖ TypeScript check passed"
        
        # Package audit (non-failing)
        npm audit --audit-level=moderate || echo "‚úÖ Audit completed"
        
        echo "‚úÖ Code quality simulation successful"

  # Test cross-platform compatibility
  test-cross-platform:
    name: Test Cross-Platform Compatibility
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Test npm workflow on ${{ matrix.os }}
      run: |
        echo "Testing npm workflow on ${{ matrix.os }}..."
        npm ci
        npm run build
        echo "‚úÖ npm workflow successful on ${{ matrix.os }}"
        
    - name: Test CMake availability
      run: |
        echo "Testing CMake availability on ${{ matrix.os }}..."
        cmake --version || echo "CMake not available"
        
    - name: Test file operations
      run: |
        echo "Testing file operations on ${{ matrix.os }}..."
        ls -la
        echo "‚úÖ File operations successful on ${{ matrix.os }}"